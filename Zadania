Zadanie 1: Implementacja blokady konta po kilku nieudanych próbach logowania
Cel:
Użytkownik ma zaimplementować mechanizm blokady konta po 5 nieudanych próbach logowania w ciągu 15 minut.

Instrukcja:
1. Dodanie nowych kolumn do tabeli User:
- failed_attempts (integer): liczba nieudanych prób logowania.
- last_failed_attempt (datetime): czas ostatniej próby logowania.
- is_locked (boolean): informacja, czy konto jest zablokowane.

2. Zmodyfikuj logikę w widoku /login:
- Sprawdź, czy konto użytkownika jest zablokowane (is_locked).
- Jeśli tak, wyświetl komunikat „Twoje konto jest zablokowane. Spróbuj ponownie za 15 minut.”
- Jeśli użytkownik wprowadzi nieprawidłowe dane logowania:
- Zwiększ licznik failed_attempts.
- Ustaw czas ostatniej próby (last_failed_attempt).
- Jeśli licznik osiągnie 5 w ciągu 15 minut, ustaw is_locked na True.
- Jeśli użytkownik poda poprawne dane logowania:
- Zresetuj licznik failed_attempts.
- Ustaw is_locked na False.

3. Przetestuj mechanizm:
- Zaloguj się z nieprawidłowymi danymi pięć razy i sprawdź, czy konto zostaje zablokowane.
- Spróbuj zalogować się po 15 minutach, aby upewnić się, że blokada wygasa.

Zadanie 2: Implementacja uwierzytelniania dwuskładnikowego (2FA)
Cel:
Zaimplementowanie mechanizmu uwierzytelniania dwuskładnikowego (2FA) w aplikacji Flask, w którym użytkownik loguje się za pomocą hasła, a następnie musi wprowadzić jednorazowy kod 2FA, aby uzyskać dostęp do swojego konta.

1. Zmodyfikuj widok /login:
- Po poprawnym wprowadzeniu danych logowania:
- Wygeneruj 6-cyfrowy kod 2FA.
- Zapisz kod w bazie danych.
- Przekieruj użytkownika na stronę /two_fa.
- Symuluj wysłanie kodu na e-mail, wyświetlając go w konsoli (do uproszczenia).

2. Dodaj widok /two_fa:
- Stwórz formularz, który pozwoli użytkownikowi wprowadzić kod 2FA.
- Zweryfikuj, czy kod 2FA jest poprawny:
- Jeśli tak: zaloguj użytkownika i usuń kod 2FA z bazy danych.
- Jeśli nie: wyświetl komunikat o błędzie i pozwól na ponowną próbę.

